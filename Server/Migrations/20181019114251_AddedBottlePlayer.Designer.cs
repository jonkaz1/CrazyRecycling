// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Models;

namespace Server.Migrations
{
    [DbContext(typeof(ServerContext))]
    [Migration("20181019114251_AddedBottlePlayer")]
    partial class AddedBottlePlayer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Server.Models.AttackEffect", b =>
                {
                    b.Property<int>("AttackEffectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("AttackEffectId");

                    b.ToTable("AttackEffect");
                });

            modelBuilder.Entity("Server.Models.Bottle", b =>
                {
                    b.Property<int>("BottleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("PosX");

                    b.Property<int>("PosY");

                    b.Property<DateTime>("SpawnTime");

                    b.HasKey("BottleId");

                    b.ToTable("Bottle");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Bottle");
                });

            modelBuilder.Entity("Server.Models.CharacterClass", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("ClassId");

                    b.ToTable("CharacterClass");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CharacterClass");
                });

            modelBuilder.Entity("Server.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BottleId");

                    b.Property<int?>("CharacterClassClassId");

                    b.Property<int>("Color");

                    b.Property<string>("Name");

                    b.Property<int>("Points");

                    b.Property<double>("PosX");

                    b.Property<double>("PosY");

                    b.HasKey("PlayerId");

                    b.HasIndex("BottleId");

                    b.HasIndex("CharacterClassClassId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("Server.Models.RecyclingMachine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PosX");

                    b.Property<int>("PosY");

                    b.Property<int>("SizeX");

                    b.Property<int>("SizeY");

                    b.HasKey("MachineId");

                    b.ToTable("RecyclingMachine");
                });

            modelBuilder.Entity("Server.Models.Cola", b =>
                {
                    b.HasBaseType("Server.Models.Bottle");

                    b.Property<int>("Count");

                    b.ToTable("Cola");

                    b.HasDiscriminator().HasValue("Cola");
                });

            modelBuilder.Entity("Server.Models.GinOfDestruction", b =>
                {
                    b.HasBaseType("Server.Models.Bottle");

                    b.Property<int>("Damage");

                    b.ToTable("GinOfDestruction");

                    b.HasDiscriminator().HasValue("GinOfDestruction");
                });

            modelBuilder.Entity("Server.Models.NukeCola", b =>
                {
                    b.HasBaseType("Server.Models.Bottle");

                    b.Property<int>("Count")
                        .HasColumnName("NukeCola_Count");

                    b.ToTable("NukeCola");

                    b.HasDiscriminator().HasValue("NukeCola");
                });

            modelBuilder.Entity("Server.Models.Vodka", b =>
                {
                    b.HasBaseType("Server.Models.Bottle");

                    b.Property<int>("Damage")
                        .HasColumnName("Vodka_Damage");

                    b.ToTable("Vodka");

                    b.HasDiscriminator().HasValue("Vodka");
                });

            modelBuilder.Entity("Server.Models.Whiskey", b =>
                {
                    b.HasBaseType("Server.Models.Bottle");

                    b.Property<int>("Damage")
                        .HasColumnName("Whiskey_Damage");

                    b.ToTable("Whiskey");

                    b.HasDiscriminator().HasValue("Whiskey");
                });

            modelBuilder.Entity("Server.Models.Wine", b =>
                {
                    b.HasBaseType("Server.Models.Bottle");

                    b.Property<int>("Damage")
                        .HasColumnName("Wine_Damage");

                    b.ToTable("Wine");

                    b.HasDiscriminator().HasValue("Wine");
                });

            modelBuilder.Entity("Server.Models.Brute", b =>
                {
                    b.HasBaseType("Server.Models.CharacterClass");

                    b.Property<int>("Color");

                    b.Property<int>("Damage");

                    b.Property<int>("HealthPoints");

                    b.ToTable("Brute");

                    b.HasDiscriminator().HasValue("Brute");
                });

            modelBuilder.Entity("Server.Models.DefaultClass", b =>
                {
                    b.HasBaseType("Server.Models.CharacterClass");

                    b.Property<int?>("EffectAttackEffectId");

                    b.HasIndex("EffectAttackEffectId");

                    b.ToTable("DefaultClass");

                    b.HasDiscriminator().HasValue("DefaultClass");
                });

            modelBuilder.Entity("Server.Models.Hoarder", b =>
                {
                    b.HasBaseType("Server.Models.CharacterClass");

                    b.Property<int>("Color")
                        .HasColumnName("Hoarder_Color");

                    b.Property<int>("PointsBoost");

                    b.ToTable("Hoarder");

                    b.HasDiscriminator().HasValue("Hoarder");
                });

            modelBuilder.Entity("Server.Models.Speedy", b =>
                {
                    b.HasBaseType("Server.Models.CharacterClass");

                    b.Property<int>("HealthPoints")
                        .HasColumnName("Speedy_HealthPoints");

                    b.Property<int>("Speed");

                    b.ToTable("Speedy");

                    b.HasDiscriminator().HasValue("Speedy");
                });

            modelBuilder.Entity("Server.Models.Player", b =>
                {
                    b.HasOne("Server.Models.Bottle", "Bottle")
                        .WithMany()
                        .HasForeignKey("BottleId");

                    b.HasOne("Server.Models.CharacterClass", "CharacterClass")
                        .WithMany()
                        .HasForeignKey("CharacterClassClassId");
                });

            modelBuilder.Entity("Server.Models.DefaultClass", b =>
                {
                    b.HasOne("Server.Models.AttackEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectAttackEffectId");
                });
#pragma warning restore 612, 618
        }
    }
}
